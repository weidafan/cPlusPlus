//============================================================================
// Name        : MED_Tester.cpp
// Author      : 
// Version     :
// Copyright   : Steal this code!
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>       // std::cout
#include <thread>         // std::thread
#include <sstream>
#include "../../datastore/includes/data_store.h"
#include "../../crypto/includes/crypto.h"
#include "../../stringdatabase/includes/string_database.h"
#include "../../crypto/includes/crypto_AES.h"

using namespace std;

//I've provided some hints in the form of comments and commented out code
//use them if you wish

////global database object 
String_Database myGlobalCache;

bool testSerialization(const std::string &MYFILE1, const std::string &MYFILE2,
		Crypto *pCrypto) {
	DataStore_File myDataStore_File1(MYFILE1, pCrypto);

	myGlobalCache.save(&myDataStore_File1);

	//	//clear cache
	myGlobalCache.clear();
	std::cout << "Clearing Cache\n";
	//
	//	//load it
	myGlobalCache.load(&myDataStore_File1);
	std::cout << "Loading from file " + MYFILE1 + " \n";

	//	//save to a different file
	DataStore_File myDataStore_File2(MYFILE2, pCrypto);
	myGlobalCache.save(&myDataStore_File2);
	std::cout<<"Saving to file "+ MYFILE2 +" \n";

	//I use my own objects here to compare the files
	return true;
}


int main() {
	//I created and ran a bunch(20) of threads that added different strings to a string_database instance

	Crypto_AES myCrypto("I Like Rollos   ");
	string s = "bear";
	std::vector<thread> mythreads;
	for(int i = 0; i < 50; i++){
		mythreads.push_back(std::thread(&String_Database::add,&myGlobalCache,ref(s)));
	}


	for(auto & thread: mythreads){
		thread.join();
	}
	testSerialization("NO_ENCRYPT_FILE1", "NO_ENCRYPT_FILE2", 0);
	testSerialization("ENCRYPT_FILE1", "ENCRYPT_FILE2", &myCrypto);
	myGlobalCache.clear();
	string str1 = "hello world";
	string str2 = "hello world";
	string str3 = "dog";
	string str4 = "cat";
	string str5 = "hello world";
	string str6 = "cat";
	string str7 = "hello world";
	string str8 = "dog";

//	thread t1(&String_Database::add,&myGlobalCache,ref(str1));
//	thread t2(&String_Database::add,&myGlobalCache,ref(str2));
//	thread t3(&String_Database::add,&myGlobalCache,ref(str3));
//	thread t4(&String_Database::add,&myGlobalCache,ref(str4));
//	thread t5(&String_Database::add,&myGlobalCache,ref(str5));
//	thread t6(&String_Database::add,&myGlobalCache,ref(str6));
//	thread t7(&String_Database::add,&myGlobalCache,ref(str7));
//	thread t8(&String_Database::add,&myGlobalCache,ref(str8));


	//Then I waited for all of them to finish so my program did not crash

	//Then I went through my string_database instance and made sure that it held the correct data
	string bear = "bear1";
	std::cout<< myGlobalCache.getCount(bear)<<endl;
	//then I tested  serialization
	//first without encryption,
//	testSerialization("NO_ENCRYPT_FILE1", "NO_ENCRYPT_FILE2", 0);
//	testSerialization("ENCRYPT_FILE1", "ENCRYPT_FILE2", &myCrypto);
	//delay long enough for threads to start and get some work done
	std::this_thread::sleep_for(std::chrono::microseconds(1000000)); //add a 0 to examine system monitor resources view
	//
	//then with

}


