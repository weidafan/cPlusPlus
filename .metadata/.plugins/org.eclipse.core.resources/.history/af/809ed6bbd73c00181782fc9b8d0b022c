#include <string>
#include "stdlib.h"
#include "../includes/externs.h"
#include "../includes/waiter.h"

using namespace std;

Waiter::Waiter(int id, std::string filename) :
		id(id), myIO(filename) {
}

Waiter::~Waiter() {
}
//gets next Order from file_IO
//if return == SUCCESS then anOrder
//contains new order
//otherwise return contains error
int Waiter::getNext(ORDER &anOrder) {
	return myIO.getNext(anOrder);
	//	return SUCCESS;
}
//contains a loop that will get orders from filename one at a time
//then puts them in order_in_Q then signals baker(s) using cv_order_inQ
//so they can be consumed by baker(s)
//when finished exits loop and signals baker(s) using cv_order_inQ that
//it is done using b_WaiterIsFinished
void Waiter::beWaiter() {
	{
		std::unique_lock<mutex> lk(mutex_order_inQ);
		ORDER anOrder = { };
		while (Waiter::getNext(anOrder) == SUCCESS) {
			order_in_Q.push(anOrder);
			cout<< "The size of order inQ: "<<order_in_Q.size()<<ends;
		}
	}
	cv_order_inQ.notify_all();
	{
		std::unique_lock<mutex> lk(mutex_order_inQ);
		b_WaiterIsFinished = true;
	}
	cv_order_inQ.notify_all();
}

