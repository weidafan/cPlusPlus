#include "../includes/data_store_file.h"
//pass in a crypto object and it will be used to en/decrypt data
//don't, and data stored in clear
DataStore_File::DataStore_File(std::string fileName, Crypto* crypto) :
		DataStore::DataStore(crypto) {
	myFileName = fileName;
}

DataStore_File::~DataStore_File(void) {

}

//load from file myFileName, if present, use the crypto object to decrypt
bool load(std::vector<String_Data> &myVector){
	return false;
}

//save to file myFileName, if present, use the crypto object to encrypt
//I extracted one entry of the vector at a time and then encrypted it
//if crypto object present, saved this to disk and then sent a std::endl
//so each entry is encrypted, but you can count the number of entries
//by the number of lines in the file
bool save(std::vector<String_Data> &myVector){
	return false;
}
//force derived classes to implement load and store as appropriate
bool data_store_file::load(std::vector<String_Data> &myVector) {

}
bool save(std::vector<String_Data> &myVector)=0;

bool openFile(std::fstream& myfile, const std::string& myFileName,
		std::ios_base::openmode mode = std::ios_base::in);
void closeFile(std::fstream& myfile);
